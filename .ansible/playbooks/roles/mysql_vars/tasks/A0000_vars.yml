---
- include_role: {name: mysql_steps, allow_duplicates: false}
# compute some defaults
- set_fact:
    cacheable: false
    # Set absolute path to app role (for templates path)
    cops_mysql_vrole_path: "{{role_path.replace('_vars', '')}}"

# Generate passwords on remote box if not found in registry
- name: "mysql secrets -- {{mysqlsecret}}}"
  loop_control: {loop_var: secretvariable}
  with_items: "{{cops_mysql_secret_variables}}"
  no_log: "{{not (cops_vars_debug|default(false))}}"
  include_tasks: _set_secret_variable.yml

# Set the cops_mysql_vars var from defaults/main.yml
- name: "mysql registry init"
  include_role: {name: corpusops.roles/vars_registry}
  vars:
    cops_vars_registry_target: cops_mysql
  no_log: "{{not (cops_vars_debug|default(false))}}"
# Post process some variables
- name: "mysql registry - postprocess"
  include_jinja_vars:
    content: |
      ---
      {% set p = 'cops_mysql_vars' %}
      {% set roles = [] %}
      {% for role in vars[p]._roles %}
      {%  if 'host' not in role %}
      {%   set nrole = role|copsf_deepcopy %}
      {%   set _ = nrole.update({'host': 'localhost'}) %}
      {%   set _ = role.update({'host': '%'}) %}
      {%   set _ = roles.append(nrole) %}
      {%  endif %}
      {%  set _ = roles.append(role) %}
      {% endfor %}
      {% set _ = vars[p].update({'_roles': roles}) %}
      {% set _vars = {p: vars[p]} %}
      {% set env = _vars[p].env %}
      {% set _ = env.update(_vars[p].env_overrides) %}
      {# filter user env #}
      {% for i, val in vars.get('ansible_env', {}).items() %}
      {%  if not i.startswith(
              ('OLDPWD', 'CWD', 'PWD',
               'TERM', 'USER', 'HOME', 'PS1',
               'PATH', 'ANSIBLE', 'SSH', 'LS')) %}
      {%    set _ = env.update({i: val})%}
      {%  endif %}
      {% endfor %}
      {{ _vars | to_json }}
  tags: [mysql, vars, mysql_vars]
  no_log: "{{not (cops_vars_debug|default(false))}}"

---
version: '3.5'
networks: {mysql_net: {ipam: {config: [{subnet: "172.19.116.0/24"}], driver: default}, driver: bridge}}
# Build with:
#  docker build --squash -t corpusops/mysql -f Dockerfile [--build-arg=SKIP_COPS_UPDATE=y]
# Start with:
#  docker-compose -f d*-compose.yml up -t 0 -d --force-recreate mysql
x-image: &image_template
  image: "corpusops/mysql:5.7"
  environment:
  - "DOCKER_SKIP_START=${DOCKER_SKIP_START-}"
  - |
    A_RECONFIGURE=---
    ---
    only_steps: true
    cops_mysql_lifecycle_app_push_code: false
    cops_mysql_s_docker_reconfigure: true
    cops_mysql_s_first_fixperms: true
    cops_mysql_s_setup: true
  - |
    A_POSTCONFIGURE=---
    ---
    only_steps: true
    cops_mysql_lifecycle_app_push_code: false
    cops_mysql_s_manage_content: true
    corpusops_services_db_mysql_root_password: secret47EE9Ebkn2qQf9M__CHANGEME
    cops_mysql__roles:
    - name: foo
      password: secret47EE9Ebkn2qQf9N__CHANGEME
    cops_mysql__databases:
    - db: "foo"
      owner: "foo"
  command: >
    sh -c 'if [ "x$DOCKER_SKIP_START" != x ];
    then while true;do echo sleeping;sleep 65535;done
    else exec /app_entry_point;
    fi'
  # for now this is a bloat image-as-a-vm to make a dev env ligther than a vagrant VM
  tmpfs: [/run, /run/lock]
  volumes: &image_volumes
  # systemd
  - "/sys/fs/cgroup:/sys/fs/cgroup:ro"
  # data
  - "./local/setup:/setup"
  - "./local/data/mysql:/var/lib/mysql"
  - "./local/data/logs/mysql:/var/log/mysql"
  # Remember: /setup/rootfs/ is synced inside the container /
  networks: {mysql_net: {ipv4_address: "172.19.116.3"}}
services:
  mysql:
    <<:  [ *image_template ]
